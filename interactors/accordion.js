import { Button } from '@interactors/html';
import { isVisible } from 'element-is-visible';
import HTML from './baseHTML';

function label(element) {
  const labelEl = element.querySelector('[class^=labelArea]');
  return labelEl ? labelEl.textContent.trim() : '';
}

export default HTML.extend('accordion')
  .selector('[class^=accordion]')
  .locator(label)
  .filters({
    label,
    open: el => isVisible(el.querySelector('[class^=content-region]')),
    contentHeight: el => el.querySelector('[class^=content-region]').offsetHeight,
    contentId: el => {
      const id = el.querySelector('[class^=content-region]').id;
      if (id.startsWith('accordion')) {
        return '@@autogenerated@@';
      } else {
        return id;
      }
    },
    focused: el => {
      const focus = el.ownerDocument.activeElement;
      return el.contains(focus);
    },
    index: (el) => {
      const set = el.parentNode;
      const accordions = [...set.querySelectorAll('[class^=accordion]')];

      for (let i = 0; i < accordions.length; i++) {
        if (el === accordions[i]) {
          return i;
        }
      }

      return undefined;
    }
  })
  .actions({
    clickHeader: ({ perform }) => perform(el => el.querySelector('[class^=labelArea-]').click()),
    focus: ({ find }) => find(Button()).focus()
  });
