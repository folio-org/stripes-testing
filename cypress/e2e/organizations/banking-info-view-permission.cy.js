import permissions from '../../support/dictionary/permissions';
import Organizations from '../../support/fragments/organizations/organizations';
import TopMenu from '../../support/fragments/topMenu';
import Users from '../../support/fragments/users/users';
import SettingsOrganizations from '../../support/fragments/settings/organizations/settingsOrganizations';
import getRandomPostfix from '../../support/utils/stringTools';
import { CAPABILITY_ACTIONS, CAPABILITY_TYPES } from '../../support/constants';

describe('Organizations', () => {
  const organization = {
    name: `autotest_org_${getRandomPostfix()}`,
    status: 'Active',
    code: `test_code_${getRandomPostfix()}`,
    isVendor: true,
  };
  const bankingInformation = {
    bankName: `AutoBank_${getRandomPostfix()}`,
    bankAccountNumber: '123456789012',
    transitNumber: '987654321',
    notes: 'Created from Automated test',
  };
  const testData = {
    capabSetsToAssign: [
      {
        table: CAPABILITY_TYPES.DATA,
        resource: 'UI-Organizations',
        action: CAPABILITY_ACTIONS.VIEW,
      },
      {
        table: CAPABILITY_TYPES.DATA,
        resource: 'UI-Organizations Banking-Information',
        action: CAPABILITY_ACTIONS.VIEW,
      },
    ],
    newCapabToAssign: {
      table: CAPABILITY_TYPES.DATA,
      resource: 'UI-Organizations',
      action: CAPABILITY_ACTIONS.EDIT,
    },
    role: {
      name: '',
      description: 'Autogenerated by Cypress',
      id: '',
    },
    capabSetIds: [],
  };
  let userA;

  before('Create test data', () => {
    cy.loginAsAdmin({
      path: TopMenu.settingsBankingInformationPath,
      waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
    });
    SettingsOrganizations.checkenableBankingInformationIfNeeded();

    Organizations.createOrganizationViaApi(organization).then((response) => {
      organization.id = response;
      bankingInformation.organizationId = response;
      Organizations.createBankingInformationViaApi(bankingInformation);
    });

    cy.createTempUser([
      permissions.uiOrganizationsView.gui,
      permissions.uiOrganizationsViewBankingInformation.gui,
    ])
      .then((createdUserProperties) => {
        userA = createdUserProperties;
        testData.role.name = userA.username;
        return cy.createAuthorizationRoleApi(testData.role.name, testData.role.description);
      })
      .then((role) => {
        testData.role.id = role.id;
        const promises = testData.capabSetsToAssign.map((set) => {
          return cy
            .getCapabilitySetIdViaApi({ ...set, type: set.table })
            .then((id) => testData.capabSetIds.push(id));
        });
        return Cypress.Promise.all(promises);
      })
      .then(() => {
        return cy.addCapabilitySetsToNewRoleApi(testData.role.id, testData.capabSetIds);
      })
      .then(() => {
        return cy.updateRolesForUserApi(userA.userId, [testData.role.id]);
      });
  });

  before('login for created user', () => {
    cy.login(userA.username, userA.password, {
      path: TopMenu.organizationsPath,
      waiter: Organizations.waitLoading,
    });
  });

  after('Delete test data', () => {
    cy.getAdminToken();
    Users.deleteViaApi(userA.userId);
    cy.deleteCapabilitySetsFromRoleApi(testData.role.id);
    cy.deleteAuthorizationRoleApi(testData.role.id);
    Organizations.deleteOrganizationViaApi(organization.id);
  });

  it(
    'C423503 A user can only view banking information with "Organizations: View banking information" permission (thunderjet)',
    { tags: ['criticalPath', 'thunderjet'] },
    () => {
      Organizations.searchByParameters('Name', organization.name);
      Organizations.selectOrganization(organization.name);
      Organizations.verifyBankingInformationAccordionIsPresent();
      Organizations.checkBankInformationExist(bankingInformation.bankName);
      Organizations.checkBankInformationExist(bankingInformation.bankAccountNumber);
      Organizations.checkAvailableActionsInTheActionsField();

      cy.getAdminToken();
      cy.getCapabilitySetIdViaApi({
        ...testData.newCapabToAssign,
        type: testData.newCapabToAssign.table,
      })
        .then((newSetId) => {
          return cy.addCapabilitySetsToNewRoleApi(testData.role.id, [newSetId]);
        })
        .then(() => {
          cy.login(userA.username, userA.password, {
            path: TopMenu.organizationsPath,
            waiter: Organizations.waitLoading,
          });
        });

      Organizations.searchByParameters('Name', organization.name);
      Organizations.selectOrganization(organization.name);
      Organizations.verifyBankingInformationAccordionIsPresent();
      Organizations.editOrganization();
      Organizations.verifyBankingInformationAccordionIsAbsent();
    },
  );
});
