import uuid from 'uuid';
import TopMenu from '../../support/fragments/topMenu';
import SettingsOrganizations from '../../support/fragments/settings/organizations/settingsOrganizations';
import getRandomPostfix from '../../support/utils/stringTools';
import { CAPABILITY_ACTIONS, CAPABILITY_TYPES } from '../../support/constants';
import Organizations from '../../support/fragments/organizations/organizations';
import permissions from '../../support/dictionary/permissions';
import Users from '../../support/fragments/users/users';
import NewOrganization from '../../support/fragments/organizations/newOrganization';
import Orders from '../../support/fragments/orders/orders';
import TopMenuNavigation from '../../support/fragments/topMenuNavigation';

describe('Organizations', () => {
  before('Enable Banking Information', () => {
    cy.loginAsAdmin({
      path: TopMenu.settingsBankingInformationPath,
      waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
    });
    SettingsOrganizations.checkenableBankingInformationIfNeeded();
  });

  describe('View banking information with permission', () => {
    const organization = {
      name: `autotest_org_${getRandomPostfix()}`,
      status: 'Active',
      code: `test_code_${getRandomPostfix()}`,
      isVendor: true,
    };
    const bankingInformation = {
      bankName: `AutoBank_${getRandomPostfix()}`,
      bankAccountNumber: '123456789012',
      transitNumber: '987654321',
      notes: 'Created from Automated test',
    };
    const testData = {
      capabSetsToAssign: [
        {
          table: CAPABILITY_TYPES.DATA,
          resource: 'UI-Organizations',
          action: CAPABILITY_ACTIONS.VIEW,
        },
        {
          table: CAPABILITY_TYPES.DATA,
          resource: 'UI-Organizations Banking-Information',
          action: CAPABILITY_ACTIONS.VIEW,
        },
      ],
      newCapabToAssign: {
        table: CAPABILITY_TYPES.DATA,
        resource: 'UI-Organizations',
        action: CAPABILITY_ACTIONS.EDIT,
      },
      role: {
        name: '',
        description: 'Autogenerated by Cypress',
        id: '',
      },
      capabSetIds: [],
    };
    let userA;

    before('Create test data', () => {
      cy.getAdminToken();
      Organizations.createOrganizationViaApi(organization).then((response) => {
        organization.id = response;
        bankingInformation.organizationId = response;
        Organizations.createBankingInformationViaApi(bankingInformation);
      });
      cy.createTempUser([
        permissions.uiOrganizationsView.gui,
        permissions.uiOrganizationsViewBankingInformation.gui,
      ])
        .then((createdUserProperties) => {
          userA = createdUserProperties;
          testData.role.name = userA.username;
          return cy.createAuthorizationRoleApi(testData.role.name, testData.role.description);
        })
        .then((role) => {
          testData.role.id = role.id;
          const promises = testData.capabSetsToAssign.map((set) => {
            return cy
              .getCapabilitySetIdViaApi({ ...set, type: set.table })
              .then((id) => testData.capabSetIds.push(id));
          });
          return Cypress.Promise.all(promises);
        })
        .then(() => {
          return cy.addCapabilitySetsToNewRoleApi(testData.role.id, testData.capabSetIds);
        })
        .then(() => {
          return cy.updateRolesForUserApi(userA.userId, [testData.role.id]);
        });
    });

    before('login for created user', () => {
      cy.login(userA.username, userA.password, {
        path: TopMenu.organizationsPath,
        waiter: Organizations.waitLoading,
      });
    });

    after('Delete test data', () => {
      cy.getAdminToken();
      Users.deleteViaApi(userA.userId);
      cy.deleteAuthorizationRoleApi(testData.role.id);
      Organizations.deleteOrganizationViaApi(organization.id);
    });

    it(
      'C423503 A user can only view banking information with "Organizations: View banking information" permission (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        Organizations.searchByParameters('Name', organization.name);
        Organizations.selectOrganization(organization.name);
        Organizations.verifyBankingInformationAccordionIsPresent();
        Organizations.checkBankInformationExist(bankingInformation.bankName);
        Organizations.checkBankInformationExist(bankingInformation.bankAccountNumber);
        Organizations.checkAvailableActionsInTheActionsField();

        cy.getAdminToken();
        cy.getCapabilitySetIdViaApi({
          ...testData.newCapabToAssign,
          type: testData.newCapabToAssign.table,
        })
          .then((newSetId) => {
            return cy.addCapabilitySetsToNewRoleApi(testData.role.id, [newSetId]);
          })
          .then(() => {
            cy.login(userA.username, userA.password, {
              path: TopMenu.organizationsPath,
              waiter: Organizations.waitLoading,
            });
          });

        Organizations.searchByParameters('Name', organization.name);
        Organizations.selectOrganization(organization.name);
        Organizations.verifyBankingInformationAccordionIsPresent();
        Organizations.editOrganization();
        Organizations.verifyBankingInformationAccordionIsAbsent();
      },
    );
  });

  describe('Deleting Banking information records', { retries: { runMode: 1 } }, () => {
    const firstOrganization = { ...NewOrganization.defaultUiOrganizations };
    const secondBankingInformation = {
      name: `SecondBankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    const firstBankingInformation = {
      name: `FirstBankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    let C423504User;

    before(() => {
      cy.loginAsAdmin({
        path: TopMenu.organizationsPath,
        waiter: Organizations.waitLoading,
      });
      Organizations.createOrganizationViaApi(firstOrganization).then((responseOrganizations) => {
        firstOrganization.id = responseOrganizations;
        Organizations.searchByParameters('Name', firstOrganization.name);
        Organizations.checkSearchResults(firstOrganization);
        Organizations.selectOrganization(firstOrganization.name);
        Organizations.editOrganization();
        Organizations.addBankingInformation(firstBankingInformation);
        Organizations.closeDetailsPane();
        Organizations.resetFilters();
      });
      cy.createTempUser([
        permissions.uiOrganizationsViewEditCreate.gui,
        permissions.uiOrganizationsViewEditCreateAndDeleteBankingInformation.gui,
      ]).then((secondUserProperties) => {
        C423504User = secondUserProperties;
      });
    });

    after(() => {
      cy.loginAsAdmin({ path: TopMenu.organizationsPath, waiter: Organizations.waitLoading });
      Organizations.searchByParameters('Name', firstOrganization.name);
      Organizations.checkSearchResults(firstOrganization);
      Organizations.selectOrganizationInCurrentPage(firstOrganization.name);
      Organizations.editOrganization();
      Organizations.deleteBankingInformation();
      Organizations.closeDetailsPane();
      Organizations.resetFilters();
      Organizations.deleteOrganizationViaApi(firstOrganization.id);
      Users.deleteViaApi(C423504User.userId);
    });

    it(
      'C423514 Deleting Banking information records from an Organization with "Organizations: View, edit, create and delete banking information" (thunderjet)',
      { tags: ['criticalPathFlaky', 'thunderjet'] },
      () => {
        cy.login(C423504User.username, C423504User.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
        Organizations.searchByParameters('Name', firstOrganization.name);
        Organizations.checkSearchResults(firstOrganization);
        Organizations.selectOrganization(firstOrganization.name);
        Organizations.checkBankInformationExist(firstBankingInformation.name);
        Organizations.editOrganization();
        Organizations.addSecondBankingInformation(secondBankingInformation);
        Organizations.checkBankInformationExist(secondBankingInformation.name);
        Organizations.editOrganization();
        Organizations.removeBankingInfoByBankName(firstBankingInformation.name);
        Organizations.checkBankInformationExist(secondBankingInformation.name);
      },
    );
  });

  describe('Searching in organization look-up', { retries: { runMode: 1 } }, () => {
    const firstOrganization = { ...NewOrganization.defaultUiOrganizations };
    const secondOrganization = {
      name: `autotest_name2_${getRandomPostfix()}`,
      status: 'Active',
      code: `autotest_code_${getRandomPostfix()}`,
      isVendor: true,
      erpCode: `2ERP-${getRandomPostfix()}`,
    };
    const secondBankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    const firstBankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };

    let user;
    let C423432User;

    before(() => {
      cy.loginAsAdmin({
        path: TopMenu.organizationsPath,
        waiter: Organizations.waitLoading,
      });
      Organizations.createOrganizationViaApi(firstOrganization).then((responseOrganizations) => {
        firstOrganization.id = responseOrganizations;
        Organizations.searchByParameters('Name', firstOrganization.name);
        Organizations.checkSearchResults(firstOrganization);
        Organizations.selectOrganizationInCurrentPage(firstOrganization.name);
        Organizations.editOrganization();
        Organizations.addBankingInformation(firstBankingInformation);
        Organizations.closeDetailsPane();
        Organizations.resetFilters();
      });
      Organizations.createOrganizationViaApi(secondOrganization).then(
        (responseSecondOrganizations) => {
          secondOrganization.id = responseSecondOrganizations;
          Organizations.searchByParameters('Name', secondOrganization.name);
          Organizations.checkSearchResults(secondOrganization);
          Organizations.selectOrganizationInCurrentPage(secondOrganization.name);
          Organizations.editOrganization();
          Organizations.addBankingInformation(secondBankingInformation);
          Organizations.closeDetailsPane();
        },
      );
      cy.createTempUser([
        permissions.uiOrdersView.gui,
        permissions.uiOrganizationsViewBankingInformation.gui,
      ]).then((userProperties) => {
        user = userProperties;
        cy.login(userProperties.username, userProperties.password, {
          path: TopMenu.ordersPath,
          waiter: Orders.waitLoading,
        });
      });
      cy.createTempUser([permissions.uiOrdersView.gui]).then((secondUserProperties) => {
        C423432User = secondUserProperties;
      });
    });

    after(() => {
      cy.loginAsAdmin({ path: TopMenu.organizationsPath, waiter: Organizations.waitLoading });
      Organizations.searchByParameters('Name', firstOrganization.name);
      Organizations.checkSearchResults(firstOrganization);
      Organizations.selectOrganizationInCurrentPage(firstOrganization.name);
      Organizations.editOrganization();
      Organizations.deleteBankingInformation();
      Organizations.closeDetailsPane();
      Organizations.resetFilters();
      Organizations.searchByParameters('Name', secondOrganization.name);
      Organizations.checkSearchResults(secondOrganization);
      Organizations.selectOrganizationInCurrentPage(secondOrganization.name);
      Organizations.editOrganization();
      Organizations.deleteBankingInformation();
      Organizations.closeDetailsPane();
      Organizations.deleteOrganizationViaApi(firstOrganization.id);
      Organizations.deleteOrganizationViaApi(secondOrganization.id);
      Users.deleteViaApi(user.userId);
      Users.deleteViaApi(C423432User.userId);
    });

    it(
      'C423426 Searching in "Organization look-up" by "Bank account number" with appropriate permission (thunderjet)',
      { tags: ['criticalPathBroken', 'thunderjet'] },
      () => {
        Orders.openVendorFilterModal();
        Orders.searchVendorbyindex(
          'Bank account number',
          firstBankingInformation.accountNumber,
          firstOrganization,
        );
        Orders.resetFilters();
        Orders.openVendorFilterModal();
        Orders.searchVendorbyindex(
          'Bank account number',
          secondBankingInformation.accountNumber,
          secondOrganization,
        );
        Orders.resetFilters();
      },
    );
    it(
      'C423427 Searching in "Organization look-up" by "Bank account number" in "All" section with banking permission (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        Orders.openVendorFilterModal();
        Orders.searchVendorbyindex('All', firstBankingInformation.accountNumber, firstOrganization);
        Orders.resetFilters();
        Orders.openVendorFilterModal();
        Orders.searchVendorbyindex(
          'All',
          secondBankingInformation.accountNumber,
          secondOrganization,
        );
        Orders.resetFilters();
      },
    );

    it(
      'C423432 Searching in "Organization look-up" by "Bank account number" without banking permissions (thunderjet)',
      { tags: ['criticalPathBroken', 'thunderjet'] },
      () => {
        cy.login(C423432User.username, C423432User.password, {
          path: TopMenu.ordersPath,
          waiter: Orders.waitLoading,
        });
        Orders.openVendorFilterModal();
        Orders.searchAbsentVendorbyindex(
          'All',
          firstBankingInformation.accountNumber,
          firstOrganization,
        );
        Orders.openVendorFilterModal();
        Orders.searchAbsentVendorbyindex(
          'All',
          secondBankingInformation.accountNumber,
          secondOrganization,
        );
      },
    );
  });

  describe('Disable view banking information without permission', () => {
    const organization = {
      name: `autotest_org_${getRandomPostfix()}`,
      status: 'Active',
      code: `autotest_code_${getRandomPostfix()}`,
      isVendor: true,
      erpCode: `ERP-${getRandomPostfix()}`,
    };
    const bankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    const capabSetsToAssign = {
      table: CAPABILITY_TYPES.DATA,
      resource: 'UI-Organizations',
      action: CAPABILITY_ACTIONS.CREATE,
    };

    const newCapabToAssign = {
      table: CAPABILITY_TYPES.DATA,
      resource: 'UI-Organizations',
      action: CAPABILITY_ACTIONS.DELETE,
    };
    let userA;
    const role = { id: '', name: '', description: 'Autogenerated by Cypress' };

    before(() => {
      cy.loginAsAdmin({
        path: TopMenu.organizationsPath,
        waiter: Organizations.waitLoading,
      });
      Organizations.createOrganizationViaApi(organization).then((responseOrganizations) => {
        organization.id = responseOrganizations;
        Organizations.searchByParameters('Name', organization.name);
        Organizations.checkSearchResults(organization);
        Organizations.selectOrganization(organization.name);
        Organizations.editOrganization();
        Organizations.addBankingInformation(bankingInformation);
        Organizations.closeDetailsPane();
      });
      cy.createTempUser([permissions.uiOrganizationsViewEditCreate.gui])
        .then((u) => {
          userA = u;
          role.name = userA.username;
          return cy.createAuthorizationRoleApi(role.name, role.description);
        })
        .then((createdRole) => {
          role.id = createdRole.id;
          return cy
            .getCapabilitySetIdViaApi({ ...capabSetsToAssign, type: capabSetsToAssign.table })
            .then((setId) => cy.addCapabilitySetsToNewRoleApi(role.id, [setId]));
        })
        .then(() => {
          return cy.updateRolesForUserApi(userA.userId, [role.id]);
        });
    });

    after(() => {
      cy.loginAsAdmin({ path: TopMenu.organizationsPath, waiter: Organizations.waitLoading });
      Organizations.deleteOrganizationViaApi(organization.id);
      cy.deleteAuthorizationRoleApi(role.id);
      Users.deleteViaApi(userA.userId);
    });

    it(
      'C423516 User cannot view banking information without banking information permission (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        cy.login(userA.username, userA.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
        Organizations.searchByParameters('Name', organization.name);
        Organizations.checkSearchResults(organization);
        Organizations.selectOrganization(organization.name);
        Organizations.editOrganization();
        Organizations.verifyBankingInformationAccordionIsAbsent();

        cy.getAdminToken();
        cy.getCapabilitySetIdViaApi({ ...capabSetsToAssign, type: capabSetsToAssign.table })
          .then((oldSetId) => {
            return cy
              .getCapabilitySetIdViaApi({ ...newCapabToAssign, type: newCapabToAssign.table })
              .then((newSetId) => ({ oldSetId, newSetId }));
          })
          .then(({ oldSetId, newSetId }) => {
            return cy.deleteCapabilitySetsFromRoleApi(role.id).then(() => ({ oldSetId, newSetId }));
          })
          .then(({ oldSetId, newSetId }) => {
            return cy
              .addCapabilitySetsToNewRoleApi(role.id, [newSetId])
              .then(() => ({ oldSetId, newSetId }));
          });

        cy.login(userA.username, userA.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
        Organizations.searchByParameters('Name', organization.name);
        Organizations.checkSearchResults(organization);
        Organizations.selectOrganization(organization.name);
        Organizations.editOrganization();
        Organizations.verifyBankingInformationAccordionIsAbsent();
        Organizations.cancelOrganization();
        Organizations.verifyBankingInformationAccordionIsAbsent();
      },
    );
  });

  describe('Cancel adding "Banking information" record', () => {
    const type = { ...SettingsOrganizations.defaultAccountTypes };
    const category1 = { ...SettingsOrganizations.defaultCategories };
    const category2 = { id: uuid(), value: `autotest_category_name_2_${getRandomPostfix()}` };
    const organization = {
      name: `AutotestVendor_${getRandomPostfix()}`,
      status: 'Active',
      code: `test_code_${getRandomPostfix()}`,
      isVendor: true,
      addresses: [
        {
          addressLine1: 'Test address line 1',
          city: 'City',
          country: 'USA',
          stateRegion: 'State',
          zipCode: '12345',
          language: 'eng',
          categories: [category1.id, category2.id],
          isPrimary: true,
        },
      ],
    };
    const bankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: '',
    };
    const bankingInformation2 = {
      name: 'B'.repeat(70),
      accountNumber: 'A'.repeat(60),
      transitNumber: 'T'.repeat(40),
      notes: 'Test banking information note',
      addressCategory: category1.value,
      accountType: type.name,
    };

    let user;

    before(() => {
      cy.loginAsAdmin({
        path: TopMenu.settingsBankingInformationPath,
        waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
      });
      SettingsOrganizations.createAccountTypesViaApi(type);
      SettingsOrganizations.createCategoriesViaApi(category1);
      SettingsOrganizations.createCategoriesViaApi(category2);
      SettingsOrganizations.selectAccountTypes();
      SettingsOrganizations.ensureAccountTypesExist(1);
      SettingsOrganizations.selectCategories();
      SettingsOrganizations.ensureCategoriesExist(3);
      Organizations.createOrganizationViaApi(organization).then((response) => {
        organization.id = response;
      });

      cy.createTempUser([
        permissions.uiOrganizationsViewEdit.gui,
        permissions.uiOrganizationsViewEditAndCreateBankingInformation.gui,
      ]).then((userProperties) => {
        user = userProperties;
        cy.login(user.username, user.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
      });
    });

    after(() => {
      cy.getAdminToken();
      Users.deleteViaApi(user.userId);
      Organizations.deleteOrganizationViaApi(organization.id);
      SettingsOrganizations.deleteOrganizationCategoriesViaApi(category1.id);
      SettingsOrganizations.deleteOrganizationCategoriesViaApi(category2.id);
      SettingsOrganizations.deleteOrganizationAccountTypeViaApi(type.id);
    });

    it(
      'C423519 Verifying all fields and "Cancel" option while adding "Banking information" record (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        Organizations.searchByParameters('Name', organization.name);
        Organizations.selectOrganization(organization.name);
        Organizations.verifyBankingInformationAccordionIsPresent();
        Organizations.editOrganization();
        Organizations.fillINBankingInformationSection(bankingInformation);
        Organizations.cancelOrganization();
        Organizations.keepEditingOrganization();
        Organizations.cancelOrganization();
        Organizations.closeWithoutSaving();
        Organizations.checkBankInformationIsEmpty();
        Organizations.editOrganization();
        Organizations.addFullBankingInformation(bankingInformation2);
        cy.wait(5000);
        Organizations.verifyBankingInformationAccordionIsPresent();
      },
    );
  });

  describe('Verifying that permission does not allow user to see "Organizations" records', () => {
    const organization = {
      name: `autotest_org_${getRandomPostfix()}`,
      status: 'Active',
      code: `test_code_${getRandomPostfix()}`,
      isVendor: true,
      erpCode: `ERP-${getRandomPostfix()}`,
    };

    let user;

    before('Create test data', () => {
      cy.getAdminToken();
      Organizations.createOrganizationViaApi(organization).then((response) => {
        organization.id = response;
      });

      cy.createTempUser([
        permissions.uiOrganizationsIntegrationUsernamesAndPasswordsView.gui,
        permissions.uiFinanceViewFiscalYear.gui,
      ]).then((userProperties) => {
        user = userProperties;
      });
    });

    after('Delete test data', () => {
      cy.getAdminToken();
      Users.deleteViaApi(user.userId);
      Organizations.deleteOrganizationViaApi(organization.id);
    });

    it(
      'C423502 Verifying that "Organizations: Integration usernames and passwords: view" permission does not allow user to see "Organizations" records (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        cy.login(user.username, user.password);
        TopMenuNavigation.verifyAppButtonShown('Finance', true);
        TopMenuNavigation.verifyAppButtonShown('Organizations', false);
      },
    );
  });

  describe('Viewing and editing "Banking information" record with permission', () => {
    const firstOrganization = { ...NewOrganization.defaultUiOrganizations };
    const secondOrganization = {
      name: `autotest_name2_${getRandomPostfix()}`,
      status: 'Active',
      code: `autotest_code_${getRandomPostfix()}`,
      isVendor: true,
      erpCode: `2ERP-${getRandomPostfix()}`,
    };
    const secondBankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    const firstBankingInformation = {
      name: `BankInfo_${getRandomPostfix()}`,
      accountNumber: getRandomPostfix(),
    };
    let C423504User;

    before(() => {
      cy.loginAsAdmin({ path: TopMenu.organizationsPath, waiter: Organizations.waitLoading });
      Organizations.createOrganizationViaApi(firstOrganization).then((responseOrganizations) => {
        firstOrganization.id = responseOrganizations;
        Organizations.searchByParameters('Name', firstOrganization.name);
        Organizations.checkSearchResults(firstOrganization);
        Organizations.selectOrganization(firstOrganization.name);
        Organizations.editOrganization();
        Organizations.addBankingInformation(firstBankingInformation);
        Organizations.closeDetailsPane();
        Organizations.resetFilters();
      });
      Organizations.createOrganizationViaApi(secondOrganization).then(
        (responseSecondOrganizations) => {
          secondOrganization.id = responseSecondOrganizations;
          Organizations.searchByParameters('Name', secondOrganization.name);
          Organizations.checkSearchResults(secondOrganization);
          Organizations.selectOrganization(secondOrganization.name);
          Organizations.editOrganization();
          Organizations.addBankingInformation(secondBankingInformation);
          Organizations.closeDetailsPane();
        },
      );
      cy.createTempUser([
        permissions.uiOrganizationsViewEdit.gui,
        permissions.uiOrganizationsViewAndEditBankingInformation.gui,
      ]).then((secondUserProperties) => {
        C423504User = secondUserProperties;
      });
    });

    after(() => {
      cy.loginAsAdmin({ path: TopMenu.organizationsPath, waiter: Organizations.waitLoading });
      Organizations.searchByParameters('Name', firstOrganization.name);
      Organizations.checkSearchResults(firstOrganization);
      Organizations.selectOrganization(firstOrganization.name);
      Organizations.editOrganization();
      Organizations.deleteBankingInformation();
      Organizations.closeDetailsPane();
      Organizations.resetFilters();
      Organizations.searchByParameters('Name', secondOrganization.name);
      Organizations.checkSearchResults(secondOrganization);
      Organizations.selectOrganization(secondOrganization.name);
      Organizations.editOrganization();
      Organizations.deleteBankingInformation();
      Organizations.closeDetailsPane();
      Organizations.deleteOrganizationViaApi(firstOrganization.id);
      Organizations.deleteOrganizationViaApi(secondOrganization.id);
      Users.deleteViaApi(C423504User.userId);
    });

    it(
      'C423504 Viewing and editing "Banking information" record with "Organizations: View and edit banking information" permission (thunderjet)',
      { tags: ['criticalPathFlaky', 'thunderjet'] },
      () => {
        cy.login(C423504User.username, C423504User.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
        Organizations.searchByParameters('Name', firstOrganization.name);
        Organizations.checkSearchResults(firstOrganization);
        Organizations.selectOrganization(firstOrganization.name);
        Organizations.buttonNewIsAbsent();
        Organizations.checkBankInformationExist(firstBankingInformation.name);
        Organizations.editOrganization();
        Organizations.editBankingInformationName(secondBankingInformation.name);
        Organizations.checkBankingInformationAddButtonIsDisabled();
        Organizations.saveOrganization();
        Organizations.checkBankInformationExist(secondBankingInformation.name);
      },
    );
  });

  describe('Disable view banking information when "Enable banking information" setting is not active', () => {
    const organization = {
      name: `autotest_org_${getRandomPostfix()}`,
      status: 'Active',
      code: `test_code_${getRandomPostfix()}`,
      isVendor: true,
    };
    const bankingInformation = {
      bankName: `AutoBank_${getRandomPostfix()}`,
      bankAccountNumber: '123456789012',
      transitNumber: '987654321',
      notes: 'Created from Automated test',
    };

    let user;

    before('Create test data', () => {
      cy.loginAsAdmin({
        path: TopMenu.settingsBankingInformationPath,
        waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
      });
      SettingsOrganizations.uncheckenableBankingInformationIfChecked();

      Organizations.createOrganizationViaApi(organization).then((response) => {
        organization.id = response;
        bankingInformation.organizationId = response;
        Organizations.createBankingInformationViaApi(bankingInformation);
      });

      cy.createTempUser([
        permissions.uiOrganizationsAssignAcquisitionUnitsToNewOrganization.gui,
        permissions.uiOrganizationsIntegrationUsernamesAndPasswordsView.gui,
        permissions.uiOrganizationsIntegrationUsernamesAndPasswordsViewEdit.gui,
        permissions.uiOrganizationsInterfaceUsernamesAndPasswordsView.gui,
        permissions.uiOrganizationsInterfaceUsernamesAndPasswordsViewEditCreateDelete.gui,
        permissions.uiOrganizationsManageAcquisitionUnits.gui,
        permissions.uiOrganizationsView.gui,
        permissions.uiOrganizationsViewAndEditBankingInformation.gui,
        permissions.uiOrganizationsViewBankingInformation.gui,
        permissions.uiOrganizationsViewEdit.gui,
        permissions.uiOrganizationsViewEditAndCreateBankingInformation.gui,
        permissions.uiOrganizationsViewEditCreate.gui,
        permissions.uiOrganizationsViewEditCreateAndDeleteBankingInformation.gui,
        permissions.uiOrganizationsViewEditDelete.gui,
        permissions.uiSettingsOrganizationsCanViewAndEditSettings.gui,
        permissions.uiSettingsOrganizationsCanViewOnlySettings.gui,
      ]).then((userProperties) => {
        user = userProperties;
        cy.login(user.username, user.password, {
          path: TopMenu.organizationsPath,
          waiter: Organizations.waitLoading,
        });
      });
    });

    after('Delete test data', () => {
      cy.getAdminToken();
      Organizations.deleteOrganizationViaApi(organization.id);
      Users.deleteViaApi(user.userId);
    });

    it(
      'C423547 A user can not view banking information when "Enable banking information" setting is not active (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        // Search and select organization
        Organizations.searchByParameters('Name', organization.name);
        Organizations.selectOrganization(organization.name);
        Organizations.verifyBankingInformationAccordionIsAbsent();
        Organizations.editOrganization();
        Organizations.verifyBankingInformationAccordionIsAbsent();
      },
    );
  });

  describe('Create an account type', () => {
    let user;
    const accountType = {
      name: `TestAccountType_${getRandomPostfix()}`,
    };

    before('Create user', () => {
      cy.getAdminToken();
      cy.createTempUser([permissions.uiSettingsOrganizationsCanViewAndEditSettings.gui]).then(
        (userProperties) => {
          user = userProperties;
          cy.waitForAuthRefresh(() => {
            cy.login(user.username, user.password, {
              path: TopMenu.settingsOrganizationsPath,
              waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
            });
            cy.reload();
            SettingsOrganizations.waitLoadingOrganizationSettings();
          }, 20_000);
        },
      );
    });

    after('Delete test data', () => {
      cy.loginAsAdmin({
        path: TopMenu.settingsOrganizationsPath,
        waiter: SettingsOrganizations.waitLoadingOrganizationSettings,
      });
      SettingsOrganizations.selectAccountTypes();
      SettingsOrganizations.deleteAccountType(accountType);
      Users.deleteViaApi(user.userId);
    });

    it(
      'C411687 Create an account type (thunderjet)',
      { tags: ['criticalPath', 'thunderjet'] },
      () => {
        SettingsOrganizations.selectAccountTypes();
        SettingsOrganizations.clickNewButton();
        SettingsOrganizations.clickOutsideAccountTypeField();
        SettingsOrganizations.checkErrorMessage();
        SettingsOrganizations.fillAccountTypeName(accountType.name);
        SettingsOrganizations.saveAccountTypeChanges();
        SettingsOrganizations.checkRowActionButtons(accountType.name);
      },
    );
  });
});
