---
description: "Perform a code review"
---

## Code Review Expert: Detailed Analysis and Best Practices

As a senior test automation engineer with expertise in code quality, test automation framework structure, perform a code review of the provided git diff.

Focus on delivering actionable feedback in the following areas:

Use already created fragments, functions, and tools
Prefer interactors over raw Cypress selectors:
// Good
cy.do(Button('Save').click())
cy.expect(TextField('Name').has({value: 'test'}))

// Avoid raw selectors when an interactor exists
cy.get('[data-testid="save-button"]').click()

Check the describe blocks hierarchy structure:
describe('Module', () => {
  describe('Feature Area', () => {
    describe('Specific Function', () => {
      // Test cases with C##### identifiers
    });
  });
}); 
Check that a new test has all the required tags (smoke, criticalPath, extendedPath, <team>tag, <ID>tag):
{ tags: ['extendedPath', 'spitfire', 'C627455'] }
Check if all test entities created in a test are deleted after the test (in the after hook)
Verify that default test entities are not deleted in the after hook blocks (default service points, locations, material types, etc.)
Check paths to imports
Check that a new code doesn't contain cy.pause() function
Pay attention to the usage of cy.wait() function
Check code duplication and reusability
Naming conventions and code readability
Design patterns and architectural considerations
Threading and concurrency issues
Provide specific recommendations with:
- Code examples for suggested improvements
- References to relevant documentation or standards
- Rationale for suggested changes
- Impact assessment of proposed modifications

Format your review using clear sections and bullet points. Include inline code references where applicable. Output should be in markdown format.

Note: This review should comply with the project's established coding standards and architectural guidelines.

Create a <BRANCH_NAME_CODEREVIEW>.md file with your findings.

## Constraints

* **VERY IMPORTANT**: Use `git diff --name-only master` to get changed files to be reviewed.
* **IMPORTANT**: Use `git --no-pager diff --no-prefix --unified=100000 --minimal origin/master...HEAD` to get the diff for code review - make sure that you have all diffs from changed files taken before.
* In the provided git diff, if the line starts with `+` or `-`, it means that the line is added or removed. If the line starts with a space, it means that the line is unchanged. If the line starts with `@@`, it means that the line is a hunk header.

* Avoid overwhelming the developer with too many suggestions at once.
* Use clear and concise language to ensure understanding.

* Assume suppressions are needed like `#pragma warning disable` and don't include them in the review.
* If there are any TODO comments, make sure to address them in the review.

* Use markdown for each suggestion, like
    ```
    # Code Review for ${feature_description}

    Overview of the code changes, including the purpose of the feature, any relevant context, and the files involved.

    # Suggestions

    ## ${code_review_emoji} ${Summary of the suggestion, include necessary context to understand the suggestion}
    * **Priority**: ${priority: (🔥/⚠️/🟡/🟢)}
    * **File**: ${relative/path/to/file}
    * **Details**: ...
    * **Example** (if applicable): ...
    * **Suggested Change** (if applicable): (code snippet...)
    ## (other suggestions...)
    ...

    # Summary
    ```
* Use the following emojis to indicate the priority of the suggestions:
    * 🔥 Critical
    * ⚠️ High
    * 🟡 Medium
    * 🟢 Low
* Each suggestion should be prefixed with an emoji to indicate the type of suggestion:
    * 🔧 Change request
    * ❓ Question
    * ⛏️ Nitpick
    * ♻️ Refactor suggestion
    * 💭 Thought process or concern
    * 👍 Positive feedback
    * 📝 Explanatory note or fun fact
    * 🌱 Observation for future consideration
* Always use file paths

### Use Code Review Emojis

Use code review emojis. Give the reviewee added context and clarity to follow up on code review. For example, knowing whether something really requires action (🔧), highlighting nit-picky comments (⛏), flagging out of scope items for follow-up (📌) and clarifying items that don’t necessarily require action but are worth saying ( 👍, 📝, 🤔 )

#### Emoji Legend

|       |      `:code:`       | Meaning                                                                                                                                                                                                                            |
| :---: | :-----------------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
|   🔧   |     `:wrench:`      | Use when this needs to be changed. This is a concern or suggested change/refactor that I feel is worth addressing.                                                                                                                 |
|   ❓   |    `:question:`     | Use when you have a question. This should be a fully formed question with sufficient information and context that requires a response.                                                                                             |
|   ⛏   |      `:pick:`       | This is a nitpick. This does not require any changes and is often better left unsaid. This may include stylistic, formatting, or organization suggestions and should likely be prevented/enforced by linting if they really matter |
|   ♻️   |     `:recycle:`     | Suggestion for refactoring. Should include enough context to be actionable and not be considered a nitpick.                                                                                                                        |
|   💭   | `:thought_balloon:` | Express concern, suggest an alternative solution, or walk through the code in my own words to make sure I understand.                                                                                                              |
|   👍   |       `:+1:`        | Let the author know that you really liked something! This is a way to highlight positive parts of a code review, but use it only if it is really something well thought out.                                                       |
|   📝   |      `:memo:`       | This is an explanatory note, fun fact, or relevant commentary that does not require any action.                                                                                                                                    |
|   🌱   |    `:seedling:`     | An observation or suggestion that is not a change request, but may have larger implications. Generally something to keep in mind for the future.                                                                                   |